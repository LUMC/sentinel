package nl.lumc.sasc.sentinel.db

import com.mongodb.casbah.Imports._
import com.novus.salat._
import com.novus.salat.global._
import nl.lumc.sasc.sentinel.models.ReferenceRecord

/** Trait for connecting to a reference records collection. */
trait ReferencesAdapter extends MongodbConnector {

  /** Collection used by this adapter. */
  private lazy val coll = mongo.db(collectionNames.References)

  /**
   * Stores a reference record in the database or create its copy with the existing database ID if it is already stored.
   *
   * Since reference IDs are generated by Sentinel instead of MongoDB, we always need to check whether the given
   * reference already has a record in the database. This check is done by comparing the `combinedMd5` value of the
   * reference record. If a reference record is already stored in the database, it will be transformed to a new copy
   * that has the database ID. Otherwise, it is added to the database and then returned unchanged.
   *
   * @param ref Reference record.
   * @return Reference record with the existing database ID.
   */
  def getOrStoreReference(ref: ReferenceRecord): ReferenceRecord =
    // TODO: refactor to use Futures instead
    coll.findOne(MongoDBObject("combinedMd5" -> ref.combinedMd5)) match {
      case Some(dbo) => grater[ReferenceRecord].asObject(dbo)
      case None =>
        coll.insert(grater[ReferenceRecord].asDBObject(ref))
        ref
    }

  /**
   * Retrieves all reference records in the database.
   *
   * @return sequence of reference records.
   */
  def getReferences(): Seq[ReferenceRecord] =
    // TODO: refactor to use Futures instead
    coll
      .find()
      .sort(MongoDBObject("creationTimeUtc" -> -1))
      .map { case dbo => grater[ReferenceRecord].asObject(dbo) }
      .toSeq

  /**
   * Retrieves a single reference record.
   *
   * @param refId ID of the reference record to return.
   * @return A reference record object, if it exists.
   */
  def getReference(refId: ObjectId): Option[ReferenceRecord] =
    // TODO: refactor to use Futures instead
    coll
      .findOneByID(refId)
      .collect { case dbo => grater[ReferenceRecord].asObject(dbo) }
}
